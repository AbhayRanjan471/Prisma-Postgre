// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["fullTextSearchPostgres"] //Enabling full-text search for PostgreSQL
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Creating User Schema
model User {
  id         Int       @id @default(autoincrement()) //@default(autoincrement()) - Specifies that the value for the id field will be automatically generated and incremented by the database for each new record.
  name       String //String? - ? means option that means if the user doesnot pass the name then also it will work
  email      String    @unique
  password   String?
  post       Post[] //This establishes a relationship with the post model. The post[] indicates that a single user can have many posts. This is the one-to-many relationship.
  comment    Comment[]
  created_at DateTime  @default(now()) //now() - will give the current time at which the user was created
}

//Creating Post Schema
model Post {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade) //This establishes the relationship with the User model. fields: [user_id]: Specifies that the user_id field in the Post table is the foreign key linking this Post to a user.references: [id]: Specifies that the user_id refers to the id field in the User table.
  user_id       Int
  title         String
  description   String
  comment_count Int    @default(0)
  comment       Comment[]
  created_at    DateTime  @default(now())
}

//Creaing Comment Schema
model Comment {
  id         String   @id @default(uuid())  //The uuid() function generates a universally unique identifier (UUID) for the field whenever a new record is created.
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade) //onDelete: Cascade, This defines what happens to the related records when the referenced record is deleted. Cascade means:If a Post is deleted, all related Comment records will also be deleted automatically.
  post_id    Int
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  comment    String
  created_at DateTime @default(now())
}
